#!/usr/bin/env node-dev

let config = {}
const reloadConfig = () =>
  config = require('yaml').parse(require('fs').readFileSync('./callmemaybe.yaml', 'utf8'))

setInterval(reloadConfig, 1000)
reloadConfig()
const dns2 = require('dns2');
const { TCPClient } = require('dns2');

const resolve = TCPClient({
  dns: '1.1.1.1'
});

const { Packet } = dns2;

const server = dns2.createServer({
  udp: true,
  handle: async (request, send, rinfo) => {
    //    console.log(request)
    const response = Packet.createResponseFromRequest(request);
    const [ question ] = request.questions;

    const c = config.static[question.name]
    console.log(c)
    if (c ) {
      response.answers.push({
        name: question.name,
        type: Packet.TYPE.A,
        class: Packet.CLASS.IN,
        // ttl: 300,
        address: c.ip
      });
     require('child_process').exec(c.healthcheck, {cwd: c.folder, stdio: 'inherit'}, (err, stdout, stderr) => {
       send(response)

       if (err) {
         if (c.command) {
            console.log(require('child_process').exec(c.command, {cwd: c.folder, stdio: 'inherit'}), (err, stdout, stderr) => {
              console.error(err)
            })
         }
       }
      })

      return
    }
    const { name } = question;
    const lookup = await resolve(question.name)
    response.answers = lookup.answers
    response.header.ancount = lookup.header.ancount
    response.header.arcount = lookup.header.arcount
    response.header.z = lookup.header.z
    response.header.ra = lookup.header.ra
    console.log(response)
    send(response)
    // console.log(response, response2)
    // console.log(question, response, rinfo)
    // send(response);
  }
});

server.on('request', (request, response, rinfo) => {
  console.log(request.header.id, request.questions[0]);
});

server.on('requestError', (error) => {
  console.log('Client sent an invalid request', error);
});

server.on('listening', () => {
  console.log(server.addresses());
});

server.on('close', () => {
  console.log('server closed');
});

server.listen({
  // Optionally specify port, address and/or the family of socket() for udp server:
  udp: { 
    port: 53,
    // address: "127.0.0.1",
    address: "0.0.0.0",
    type: "udp4",  // IPv4 or IPv6 (Must be either "udp4" or "udp6")
  },
  
  // Optionally specify port and/or address for tcp server:
  tcp: { 
    port: 53,
    address: "0.0.0.0",
    // address: "127.0.0.1",
  },
});

// eventually
// server.close();
